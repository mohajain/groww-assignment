{"ast":null,"code":"var _jsxFileName = \"/Users/shubh.jain/Downloads/My personal/moha/groww-assignment/src/components/InfoTable.js\";\nimport React from \"react\";\nimport \"react-dates/initialize\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\"; // import \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"font-awesome/css/font-awesome.min.css\";\n\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class InfoTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n      //Raw rows data obtained from API response\n      tableRows: [],\n      // Rows data for the table\n      rowTrigger: false,\n      // Trigger that indicates row data generated from raw data or not\n      isLoaded: false,\n      // Trigger that indicates data fetched from API call or not\n      columns: [],\n      // Column Data for the table\n      rawRows: [],\n      // Array which stores the raw rows data as they are getting loaded, which finally gets converted to actual rows after transformation\n      detailedRows: [],\n      // Array for storing the data for the detailed rows view\n      detailedRowsTrigger: false // Trigger that indicates detailed rows data fetched or not\n\n    };\n  }\n  /**\n   * React lifecycle method.\n   * This method gets only once before the component is mounted\n   */\n  // componentDidMount() {\n  //   this.fetchRowData();\n  // }\n\n\n  render() {\n    return (\n      /*#__PURE__*/\n\n      /**\n       * Here the table element is written twice is avoid the reloading of the whole\n       * table whenever user presses for the detailed view. If not done so, for every change\n       * in the state of page, it will load the whole table (i.e) call backend for the data\n       * thus increasing the response time of the UI. Currently in this situation, the rows data\n       * gets loaded only for a single page refresh and does not reload unless and untill the page\n       * is refreshed.\n       */\n      _jsxDEV(\"div\", {\n        children: [this.getColumns(this.props.sdate, this.props.edate), this.state.isLoaded ? this.breakRows(this.state.rows) : \"\", this.state.rowTrigger ? /*#__PURE__*/_jsxDEV(BootstrapTable, {\n          classes: \"table table-striped table-dark\",\n          wrapperClasses: \"table-responsive\",\n          keyField: \"partitionPipeline\",\n          data: this.state.tableRows,\n          columns: this.state.columns,\n          expandRow: expandRow1,\n          pagination: paginationFactory(paginationOptions)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(BootstrapTable, {\n          classes: \"table table-striped table-dark\",\n          wrapperClasses: \"table-responsive\",\n          keyField: \"partitionPipeline\",\n          data: this.state.tableRows,\n          columns: this.state.columns,\n          expandRow: expandRow1,\n          pagination: paginationFactory(paginationOptions)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), this.state.rowTrigger ? this.state.rowTrigger = false : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/shubh.jain/Downloads/My personal/moha/groww-assignment/src/components/InfoTable.js"],"names":["React","BootstrapTable","paginationFactory","InfoTable","Component","constructor","props","state","rows","tableRows","rowTrigger","isLoaded","columns","rawRows","detailedRows","detailedRowsTrigger","render","getColumns","sdate","edate","breakRows","expandRow1","paginationOptions"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAO,gFAAP;AACA,OAAO,gEAAP,C,CACA;AACA;;AACA,OAAO,YAAP;;AAEA,eAAe,MAAMC,SAAN,SAAwBH,KAAK,CAACI,SAA9B,CAAwC;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AACD;AACVC,MAAAA,SAAS,EAAE,EAFA;AAEI;AACfC,MAAAA,UAAU,EAAE,KAHD;AAGQ;AACnBC,MAAAA,QAAQ,EAAE,KAJC;AAIM;AACjBC,MAAAA,OAAO,EAAE,EALE;AAKE;AACbC,MAAAA,OAAO,EAAE,EANE;AAME;AACbC,MAAAA,YAAY,EAAE,EAPH;AAOO;AAClBC,MAAAA,mBAAmB,EAAE,KARV,CAQiB;;AARjB,KAAb;AAUD;AAED;AACJ;AACA;AACA;AACI;AACA;AACA;;;AAMAC,EAAAA,MAAM,GAAG;AAEP;AAAA;;AACE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AAAA,mBACG,KAAKC,UAAL,CAAgB,KAAKX,KAAL,CAAWY,KAA3B,EAAkC,KAAKZ,KAAL,CAAWa,KAA7C,CADH,EAEG,KAAKZ,KAAL,CAAWI,QAAX,GAAsB,KAAKS,SAAL,CAAe,KAAKb,KAAL,CAAWC,IAA1B,CAAtB,GAAwD,EAF3D,EAGG,KAAKD,KAAL,CAAWG,UAAX,gBACC,QAAC,cAAD;AACE,UAAA,OAAO,EAAC,gCADV;AAEE,UAAA,cAAc,EAAC,kBAFjB;AAGE,UAAA,QAAQ,EAAC,mBAHX;AAIE,UAAA,IAAI,EAAE,KAAKH,KAAL,CAAWE,SAJnB;AAKE,UAAA,OAAO,EAAE,KAAKF,KAAL,CAAWK,OALtB;AAME,UAAA,SAAS,EAAES,UANb;AAOE,UAAA,UAAU,EAAEnB,iBAAiB,CAACoB,iBAAD;AAP/B;AAAA;AAAA;AAAA;AAAA,gBADD,gBAWC,QAAC,cAAD;AACE,UAAA,OAAO,EAAC,gCADV;AAEE,UAAA,cAAc,EAAC,kBAFjB;AAGE,UAAA,QAAQ,EAAC,mBAHX;AAIE,UAAA,IAAI,EAAE,KAAKf,KAAL,CAAWE,SAJnB;AAKE,UAAA,OAAO,EAAE,KAAKF,KAAL,CAAWK,OALtB;AAME,UAAA,SAAS,EAAES,UANb;AAOE,UAAA,UAAU,EAAEnB,iBAAiB,CAACoB,iBAAD;AAP/B;AAAA;AAAA;AAAA;AAAA,gBAdJ,EAwBG,KAAKf,KAAL,CAAWG,UAAX,GAAyB,KAAKH,KAAL,CAAWG,UAAX,GAAwB,KAAjD,GAA0D,EAxB7D;AAAA;AAAA;AAAA;AAAA;AAAA;AATF;AAoCD;;AAjEkD","sourcesContent":["import React from \"react\";\nimport \"react-dates/initialize\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"font-awesome/css/font-awesome.min.css\";\nimport \"../App.css\";\n\nexport default class InfoTable extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        rows: [], //Raw rows data obtained from API response\n        tableRows: [], // Rows data for the table\n        rowTrigger: false, // Trigger that indicates row data generated from raw data or not\n        isLoaded: false, // Trigger that indicates data fetched from API call or not\n        columns: [], // Column Data for the table\n        rawRows: [], // Array which stores the raw rows data as they are getting loaded, which finally gets converted to actual rows after transformation\n        detailedRows: [], // Array for storing the data for the detailed rows view\n        detailedRowsTrigger: false, // Trigger that indicates detailed rows data fetched or not\n      };\n    }\n  \n    /**\n     * React lifecycle method.\n     * This method gets only once before the component is mounted\n     */\n    // componentDidMount() {\n    //   this.fetchRowData();\n    // }\n    \n  \n    \n  \n    \n    render() {\n        \n      return (\n        /**\n         * Here the table element is written twice is avoid the reloading of the whole\n         * table whenever user presses for the detailed view. If not done so, for every change\n         * in the state of page, it will load the whole table (i.e) call backend for the data\n         * thus increasing the response time of the UI. Currently in this situation, the rows data\n         * gets loaded only for a single page refresh and does not reload unless and untill the page\n         * is refreshed.\n         */\n        <div>\n          {this.getColumns(this.props.sdate, this.props.edate)}\n          {this.state.isLoaded ? this.breakRows(this.state.rows) : \"\"}\n          {this.state.rowTrigger ? (\n            <BootstrapTable\n              classes=\"table table-striped table-dark\"\n              wrapperClasses=\"table-responsive\"\n              keyField=\"partitionPipeline\"\n              data={this.state.tableRows}\n              columns={this.state.columns}\n              expandRow={expandRow1}\n              pagination={paginationFactory(paginationOptions)}\n            />\n          ) : (\n            <BootstrapTable\n              classes=\"table table-striped table-dark\"\n              wrapperClasses=\"table-responsive\"\n              keyField=\"partitionPipeline\"\n              data={this.state.tableRows}\n              columns={this.state.columns}\n              expandRow={expandRow1}\n              pagination={paginationFactory(paginationOptions)}\n            />\n          )}\n          {this.state.rowTrigger ? (this.state.rowTrigger = false) : \"\"}\n        </div>\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/shubh.jain/Downloads/My personal/moha/groww-assignment/src/components/InfoTable.js\";\nimport React from \"react\"; // import \"react-dates/initialize\";\n\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // import \"font-awesome/css/font-awesome.min.css\";\n\nimport { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport { DropdownMenu, MenuItem } from 'react-bootstrap-dropdown-menu';\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class InfoTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.breakRows = rows => {\n      for (var i = 0; i < rows.length; i++) {\n        this.generateRows(rows[i]);\n      }\n    };\n\n    this.generateRows = rows => {\n      let res, jsonObj;\n      res = JSON.stringify(rows);\n      jsonObj = JSON.parse(res);\n      var obj = {};\n\n      if (Object.keys(jsonObj).length) {\n        this.state.tableRows.push(jsonObj);\n      }\n\n      this.state.isLoaded = false;\n      this.state.rowTrigger = true;\n    };\n\n    this.state = {\n      rows: [],\n      //Raw rows data obtained from API response\n      tableRows: [],\n      // Rows data for the?\n      selectedOption: null,\n      rowTrigger: false,\n      // Trigger that indicates row data generated from raw data or not\n      city: 'MUMBAI',\n      columns: [{\n        dataField: 'bank_name',\n        text: 'Bank'\n      }, {\n        dataField: 'ifsc',\n        text: 'IFSC'\n      }, {\n        dataField: 'branch',\n        text: 'Branch'\n      }, {\n        dataField: 'bank_id',\n        text: 'Bank ID'\n      }, {\n        dataField: 'address',\n        text: 'Address'\n      }],\n      rawRows: [],\n      // Array which stores the raw rows data as they are getting loaded, which finally gets converted to actual rows after transformation\n      detailedRows: [],\n      // Array for storing the data for the detailed rows view\n      isLoaded: false // Trigger that indicates detailed rows data fetched or not\n\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.city !== prevProps.city) {\n      this.setState({\n        city: this.props.city,\n        tableRows: []\n      });\n      this.fetchRowData();\n    }\n  }\n\n  componentDidMount() {\n    this.fetchRowData();\n  }\n\n  fetchRowData() {\n    console.log(this.props.city);\n    console.log(this.props.city + \" Hello\");\n    fetch('https://vast-shore-74260.herokuapp.com/banks?city=' + this.state.city).then(async response => {\n      const data = await response.json();\n\n      if (!response.ok) {\n        // get error message from body or default to response statusText\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      this.setState({\n        rows: data,\n        isLoaded: true\n      });\n    }).catch(error => {\n      this.setState({\n        errorMessage: error.toString()\n      });\n      console.error('There was an error!', error);\n    });\n  }\n\n  render() {\n    const {\n      selectedOption\n    } = this.state;\n    const options = [{\n      value: 'Mumbai',\n      label: 'Mumbai'\n    }, {\n      value: 'Bangalore',\n      label: 'Bangalore'\n    }, {\n      value: 'Kolkata',\n      label: 'Kolkata'\n    }, {\n      value: 'Delhi',\n      label: 'Delhi'\n    }, {\n      value: 'Chennai',\n      label: 'Chennai'\n    }];\n    const paginationOptions = {\n      page: 0,\n      sizePerPageList: [{\n        text: \"5\",\n        value: 5\n      }, {\n        text: \"10\",\n        value: 10\n      }],\n      sizePerPage: 5,\n      pageStartIndex: 0,\n      paginationSize: 3,\n      prePage: \"Prev\",\n      nextPage: \"NexfirstPage\",\n      lastPage: \"Last\",\n      paginationPosition: \"top\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.isLoaded ? this.breakRows(this.state.rows) : \"\", this.state.rowTrigger ? /*#__PURE__*/_jsxDEV(BootstrapTable, {\n        classes: \"table table-striped table-dark\",\n        wrapperClasses: \"table-responsive\",\n        keyField: \"bank_id\",\n        data: this.state.tableRows,\n        columns: this.state.columns,\n        pagination: paginationFactory(paginationOptions)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(BootstrapTable, {\n        classes: \"table table-striped table-dark\",\n        wrapperClasses: \"table-responsive\",\n        keyField: \"bank_id\",\n        data: this.state.tableRows,\n        columns: this.state.columns,\n        pagination: paginationFactory(paginationOptions)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 14\n      }, this), this.state.rowTrigger ? this.state.rowTrigger = false : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/shubh.jain/Downloads/My personal/moha/groww-assignment/src/components/InfoTable.js"],"names":["React","BootstrapTable","paginationFactory","PaginationProvider","PaginationListStandalone","filterFactory","textFilter","ToolkitProvider","Search","DropdownMenu","MenuItem","InfoTable","Component","constructor","props","breakRows","rows","i","length","generateRows","res","jsonObj","JSON","stringify","parse","obj","Object","keys","state","tableRows","push","isLoaded","rowTrigger","selectedOption","city","columns","dataField","text","rawRows","detailedRows","componentDidUpdate","prevProps","setState","fetchRowData","componentDidMount","console","log","fetch","then","response","data","json","ok","error","message","statusText","Promise","reject","catch","errorMessage","toString","render","options","value","label","paginationOptions","page","sizePerPageList","sizePerPage","pageStartIndex","paginationSize","prePage","nextPage","lastPage","paginationPosition"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import \"react-dates/initialize\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"font-awesome/css/font-awesome.min.css\";\nimport { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport { DropdownMenu, MenuItem } from 'react-bootstrap-dropdown-menu';\nimport \"../App.css\";\n\nexport default class InfoTable extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        rows: [], //Raw rows data obtained from API response\n        tableRows: [], // Rows data for the?\n        selectedOption: null,\n        rowTrigger: false, // Trigger that indicates row data generated from raw data or not\n        city: 'MUMBAI',\n        columns: [{\n            dataField: 'bank_name',\n            text: 'Bank'\n          }, {\n            dataField: 'ifsc',\n            text: 'IFSC'\n          }, {\n            dataField: 'branch',\n            text: 'Branch'\n          }, {\n            dataField: 'bank_id',\n            text: 'Bank ID'\n          }, {\n            dataField: 'address',\n            text: 'Address'\n          }],\n        rawRows: [], // Array which stores the raw rows data as they are getting loaded, which finally gets converted to actual rows after transformation\n        detailedRows: [], // Array for storing the data for the detailed rows view\n        isLoaded: false, // Trigger that indicates detailed rows data fetched or not\n      };\n    }\n\n    componentDidUpdate(prevProps) {\n      if (this.props.city !== prevProps.city) {\n        this.setState({ city : this.props.city, tableRows : []});\n        this.fetchRowData();\n      }\n      \n    }\n\n    componentDidMount() {\n        this.fetchRowData();\n    }\n\n    fetchRowData() {\n      console.log(this.props.city)\n      console.log(this.props.city + \" Hello\")\n      fetch('https://vast-shore-74260.herokuapp.com/banks?city=' + this.state.city)\n      .then(async response => {\n          const data = await response.json();\n          if (!response.ok) {\n              // get error message from body or default to response statusText\n              const error = (data && data.message) || response.statusText;\n              return Promise.reject(error);\n          }\n\n          this.setState({ rows: data, isLoaded: true })\n          \n      })\n      .catch(error => {\n          this.setState({ errorMessage: error.toString() });\n          console.error('There was an error!', error);\n      });\n    }\n\n    breakRows = (rows) => {\n        for (var i = 0; i < rows.length; i++) {\n          this.generateRows(rows[i]);\n        }\n    };\n\n    generateRows = (rows) => {\n        let res, jsonObj;\n        res = JSON.stringify(rows);\n        jsonObj = JSON.parse(res);\n        var obj = {};\n        if (Object.keys(jsonObj).length) {\n            this.state.tableRows.push(jsonObj);\n        }\n        (this.state.isLoaded = false);\n        (this.state.rowTrigger = true);\n        \n    };\n    render() {\n      const { selectedOption } = this.state;\n      const options = [\n        { value: 'Mumbai', label: 'Mumbai' },\n        { value: 'Bangalore', label: 'Bangalore' },\n        { value: 'Kolkata', label: 'Kolkata' },\n        { value: 'Delhi', label: 'Delhi' },\n        { value: 'Chennai', label: 'Chennai' },\n      ];\n      const paginationOptions = {\n        page: 0,\n        sizePerPageList: [\n          {\n            text: \"5\",\n            value: 5,\n          },\n          {\n            text: \"10\",\n            value: 10,\n          },\n        ],\n        sizePerPage: 5,\n        pageStartIndex: 0,\n        paginationSize: 3,\n        prePage: \"Prev\",\n        nextPage: \"NexfirstPage\",\n        lastPage: \"Last\",\n        paginationPosition: \"top\",\n      };\n      return (\n        <div>\n            {this.state.isLoaded ? this.breakRows(this.state.rows) : \"\"}\n            {this.state.rowTrigger ? (\n            <BootstrapTable\n            classes=\"table table-striped table-dark\"\n            wrapperClasses=\"table-responsive\"\n            keyField=\"bank_id\"\n            data={this.state.tableRows}\n            columns={this.state.columns}\n            pagination={paginationFactory(paginationOptions)}\n                />\n            ) : (\n             <BootstrapTable\n            classes=\"table table-striped table-dark\"\n            wrapperClasses=\"table-responsive\"\n            keyField=\"bank_id\"\n            data={this.state.tableRows}\n            columns={this.state.columns}\n            pagination={paginationFactory(paginationOptions)}   \n            />\n        )}\n        {this.state.rowTrigger ? (this.state.rowTrigger = false) : \"\"}\n        \n        </div>\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/shubh.jain/Downloads/My personal/moha/groww-assignment/src/components/InfoTable.js\";\nimport React from \"react\"; // import \"react-dates/initialize\";\n\nimport BootstrapTable from \"react-bootstrap-table-next\"; // import paginationFactory from \"react-bootstrap-table2-paginator\";\n// import \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"font-awesome/css/font-awesome.min.css\";\n\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class InfoTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.breakRows = rows => {\n      for (var i = 0; i < rows.length; i++) {\n        this.generateRows(rows[i]);\n      }\n    };\n\n    this.generateRows = rows => {\n      let res, jsonObj;\n      res = JSON.stringify(rows);\n      console.log(res);\n    };\n\n    this.state = {\n      rows: [],\n      //Raw rows data obtained from API response\n      tableRows: [],\n      // Rows data for the table\n      rowTrigger: false,\n      // Trigger that indicates row data generated from raw data or not\n      isLoaded: false,\n      // Trigger that indicates data fetched from API call or not\n      columns: [{\n        dataField: 'Bank',\n        text: 'Bank'\n      }, {\n        dataField: 'IFSC',\n        text: 'IFSC'\n      }, {\n        dataField: 'Branch',\n        text: 'Branch'\n      }, {\n        dataField: 'Bank ID',\n        text: 'Bank ID'\n      }, {\n        dataField: 'Address',\n        text: 'Address'\n      }],\n      totalReactPackages: [],\n      rawRows: [],\n      // Array which stores the raw rows data as they are getting loaded, which finally gets converted to actual rows after transformation\n      detailedRows: [],\n      // Array for storing the data for the detailed rows view\n      isLoaded: false // Trigger that indicates detailed rows data fetched or not\n\n    };\n  }\n  /**\n   * React lifecycle method.\n   * This method gets only once before the component is mounted\n   */\n\n\n  componentDidMount() {\n    fetch('https://vast-shore-74260.herokuapp.com/banks?city=MUMBAI').then(async response => {\n      const data = await response.json(); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response statusText\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      this.setState({\n        totalReactPackages: data,\n        isLoaded: true\n      });\n    }).catch(error => {\n      this.setState({\n        errorMessage: error.toString()\n      });\n      console.error('There was an error!', error);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.isLoaded ? this.breakRows(this.state.rows) : \"\", /*#__PURE__*/_jsxDEV(BootstrapTable, {\n        keyField: \"Bank ID\",\n        data: this.state.tableRows,\n        columns: this.state.columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/shubh.jain/Downloads/My personal/moha/groww-assignment/src/components/InfoTable.js"],"names":["React","BootstrapTable","InfoTable","Component","constructor","props","breakRows","rows","i","length","generateRows","res","jsonObj","JSON","stringify","console","log","state","tableRows","rowTrigger","isLoaded","columns","dataField","text","totalReactPackages","rawRows","detailedRows","componentDidMount","fetch","then","response","data","json","ok","error","message","statusText","Promise","reject","setState","catch","errorMessage","toString","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n// import \"react-dates/initialize\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\n// import paginationFactory from \"react-bootstrap-table2-paginator\";\n// import \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"font-awesome/css/font-awesome.min.css\";\nimport \"../App.css\";\n\nexport default class InfoTable extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        rows: [], //Raw rows data obtained from API response\n        tableRows: [], // Rows data for the table\n        rowTrigger: false, // Trigger that indicates row data generated from raw data or not\n        isLoaded: false, // Trigger that indicates data fetched from API call or not\n        columns: [{\n            dataField: 'Bank',\n            text: 'Bank'\n          }, {\n            dataField: 'IFSC',\n            text: 'IFSC'\n          }, {\n            dataField: 'Branch',\n            text: 'Branch'\n          }, {\n            dataField: 'Bank ID',\n            text: 'Bank ID'\n          }, {\n            dataField: 'Address',\n            text: 'Address'\n          }],\n          totalReactPackages : [],\n        rawRows: [], // Array which stores the raw rows data as they are getting loaded, which finally gets converted to actual rows after transformation\n        detailedRows: [], // Array for storing the data for the detailed rows view\n        isLoaded: false, // Trigger that indicates detailed rows data fetched or not\n      };\n    }\n\n    \n  \n    /**\n     * React lifecycle method.\n     * This method gets only once before the component is mounted\n     */\n    componentDidMount() {\n        fetch('https://vast-shore-74260.herokuapp.com/banks?city=MUMBAI')\n        .then(async response => {\n            const data = await response.json();\n\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response statusText\n                const error = (data && data.message) || response.statusText;\n                return Promise.reject(error);\n            }\n\n            this.setState({ totalReactPackages: data, isLoaded: true })\n            \n        })\n        .catch(error => {\n            this.setState({ errorMessage: error.toString() });\n            console.error('There was an error!', error);\n        });\n        \n    }\n\n    breakRows = (rows) => {\n        for (var i = 0; i < rows.length; i++) {\n          this.generateRows(rows[i]);\n        }\n    };\n\n    generateRows = (rows) => {\n        let res, jsonObj;\n        res = JSON.stringify(rows);\n        console.log(res);\n    }\n\n    render() {\n      return (\n        <div>\n            {this.state.isLoaded ? this.breakRows(this.state.rows) : \"\"}\n            <BootstrapTable\n              keyField='Bank ID'\n              data={this.state.tableRows}\n              columns={this.state.columns}\n            />\n        </div>\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}
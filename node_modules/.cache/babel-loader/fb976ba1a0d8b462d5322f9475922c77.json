{"ast":null,"code":"var _jsxFileName = \"/Users/shubh.jain/Downloads/My personal/moha/groww-assignment/src/components/InfoTable.js\";\nimport React from \"react\"; // import \"react-dates/initialize\";\n\nimport BootstrapTable from \"react-bootstrap-table-next\"; // import paginationFactory from \"react-bootstrap-table2-paginator\";\n// import \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"font-awesome/css/font-awesome.min.css\";\n\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class InfoTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: [],\n      //Raw rows data obtained from API response\n      tableRows: [],\n      // Rows data for the table\n      rowTrigger: false,\n      // Trigger that indicates row data generated from raw data or not\n      isLoaded: false,\n      // Trigger that indicates data fetched from API call or not\n      columns: [{\n        dataField: 'id',\n        text: 'Product ID'\n      }, {\n        dataField: 'name',\n        text: 'Product Name'\n      }, {\n        dataField: 'price',\n        text: 'Product Price'\n      }],\n      totalReactPackages: [],\n      rawRows: [],\n      // Array which stores the raw rows data as they are getting loaded, which finally gets converted to actual rows after transformation\n      detailedRows: [],\n      // Array for storing the data for the detailed rows view\n      detailedRowsTrigger: false // Trigger that indicates detailed rows data fetched or not\n\n    };\n  }\n  /**\n   * React lifecycle method.\n   * This method gets only once before the component is mounted\n   */\n\n\n  componentDidMount() {\n    fetch('https://vast-shore-74260.herokuapp.com/banks?city=MUMBAI').then(async response => {\n      const data = await response.json(); // check for error response\n\n      if (!response.ok) {\n        // get error message from body or default to response statusText\n        const error = data && data.message || response.statusText;\n        return Promise.reject(error);\n      }\n\n      this.setState({\n        totalReactPackages: data.total\n      });\n    }).catch(error => {\n      this.setState({\n        errorMessage: error.toString()\n      });\n      console.error('There was an error!', error);\n    });\n    console.log(this.state.totalReactPackages);\n  }\n\n  fetchRowData() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(BootstrapTable, {\n        keyField: \"id\",\n        data: this.state.tableRows,\n        columns: this.state.columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/shubh.jain/Downloads/My personal/moha/groww-assignment/src/components/InfoTable.js"],"names":["React","BootstrapTable","InfoTable","Component","constructor","props","state","rows","tableRows","rowTrigger","isLoaded","columns","dataField","text","totalReactPackages","rawRows","detailedRows","detailedRowsTrigger","componentDidMount","fetch","then","response","data","json","ok","error","message","statusText","Promise","reject","setState","total","catch","errorMessage","toString","console","log","fetchRowData","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,4BAA3B,C,CACA;AACA;AACA;AACA;AACA;;AACA,OAAO,YAAP;;AAEA,eAAe,MAAMC,SAAN,SAAwBF,KAAK,CAACG,SAA9B,CAAwC;AACnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AACD;AACVC,MAAAA,SAAS,EAAE,EAFA;AAEI;AACfC,MAAAA,UAAU,EAAE,KAHD;AAGQ;AACnBC,MAAAA,QAAQ,EAAE,KAJC;AAIM;AACjBC,MAAAA,OAAO,EAAE,CAAC;AACNC,QAAAA,SAAS,EAAE,IADL;AAENC,QAAAA,IAAI,EAAE;AAFA,OAAD,EAGJ;AACDD,QAAAA,SAAS,EAAE,MADV;AAEDC,QAAAA,IAAI,EAAE;AAFL,OAHI,EAMJ;AACDD,QAAAA,SAAS,EAAE,OADV;AAEDC,QAAAA,IAAI,EAAE;AAFL,OANI,CALE;AAeTC,MAAAA,kBAAkB,EAAG,EAfZ;AAgBXC,MAAAA,OAAO,EAAE,EAhBE;AAgBE;AACbC,MAAAA,YAAY,EAAE,EAjBH;AAiBO;AAClBC,MAAAA,mBAAmB,EAAE,KAlBV,CAkBiB;;AAlBjB,KAAb;AAoBD;AAID;AACJ;AACA;AACA;;;AACIC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,0DAAD,CAAL,CACCC,IADD,CACM,MAAMC,QAAN,IAAkB;AACpB,YAAMC,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAT,EAAnB,CADoB,CAGpB;;AACA,UAAI,CAACF,QAAQ,CAACG,EAAd,EAAkB;AACd;AACA,cAAMC,KAAK,GAAIH,IAAI,IAAIA,IAAI,CAACI,OAAd,IAA0BL,QAAQ,CAACM,UAAjD;AACA,eAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAKK,QAAL,CAAc;AAAEhB,QAAAA,kBAAkB,EAAEQ,IAAI,CAACS;AAA3B,OAAd;AACH,KAZD,EAaCC,KAbD,CAaOP,KAAK,IAAI;AACZ,WAAKK,QAAL,CAAc;AAAEG,QAAAA,YAAY,EAAER,KAAK,CAACS,QAAN;AAAhB,OAAd;AACAC,MAAAA,OAAO,CAACV,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH,KAhBD;AAiBAU,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK9B,KAAL,CAAWQ,kBAAvB;AACH;;AAEDuB,EAAAA,YAAY,GAAG,CAEd;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACI,QAAC,cAAD;AACI,QAAA,QAAQ,EAAC,IADb;AAEE,QAAA,IAAI,EAAE,KAAKhC,KAAL,CAAWE,SAFnB;AAGE,QAAA,OAAO,EAAE,KAAKF,KAAL,CAAWK;AAHtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAlEkD","sourcesContent":["import React from \"react\";\n// import \"react-dates/initialize\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\n// import paginationFactory from \"react-bootstrap-table2-paginator\";\n// import \"react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css\";\n// import \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\n// import \"bootstrap/dist/css/bootstrap.min.css\";\n// import \"font-awesome/css/font-awesome.min.css\";\nimport \"../App.css\";\n\nexport default class InfoTable extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        rows: [], //Raw rows data obtained from API response\n        tableRows: [], // Rows data for the table\n        rowTrigger: false, // Trigger that indicates row data generated from raw data or not\n        isLoaded: false, // Trigger that indicates data fetched from API call or not\n        columns: [{\n            dataField: 'id',\n            text: 'Product ID'\n          }, {\n            dataField: 'name',\n            text: 'Product Name'\n          }, {\n            dataField: 'price',\n            text: 'Product Price'\n          }],\n          totalReactPackages : [],\n        rawRows: [], // Array which stores the raw rows data as they are getting loaded, which finally gets converted to actual rows after transformation\n        detailedRows: [], // Array for storing the data for the detailed rows view\n        detailedRowsTrigger: false, // Trigger that indicates detailed rows data fetched or not\n      };\n    }\n\n    \n  \n    /**\n     * React lifecycle method.\n     * This method gets only once before the component is mounted\n     */\n    componentDidMount() {\n        fetch('https://vast-shore-74260.herokuapp.com/banks?city=MUMBAI')\n        .then(async response => {\n            const data = await response.json();\n\n            // check for error response\n            if (!response.ok) {\n                // get error message from body or default to response statusText\n                const error = (data && data.message) || response.statusText;\n                return Promise.reject(error);\n            }\n\n            this.setState({ totalReactPackages: data.total })\n        })\n        .catch(error => {\n            this.setState({ errorMessage: error.toString() });\n            console.error('There was an error!', error);\n        });\n        console.log(this.state.totalReactPackages);\n    }\n\n    fetchRowData() {\n\n    }\n\n    render() {\n      return (\n        <div>\n            <BootstrapTable\n                keyField='id'\n              data={this.state.tableRows}\n              columns={this.state.columns}\n            />\n        </div>\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}